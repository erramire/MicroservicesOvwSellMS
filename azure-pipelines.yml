trigger:
- 'master'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  webRepository: 'possellapi'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'

stages:
- stage: 'Buildtest'
  displayName: 'Build and Test'
  jobs:  
  - job: 'BuildAndTest'
    displayName: 'Build and test job'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

- stage: 'Devimage'
  displayName: 'Build Dev Image and push to ACR'
  dependsOn: Buildtest
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/PoS.Sell.API/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)    
    - publish: '$(Build.SourcesDirectory)/PoS.Sell.API/manifests'
      artifact: manifests

- stage: 'DevDeploy'
  displayName: 'Deploy dev containers'
  dependsOn: Devimage
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'dev.devdemo'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'Container Registry Connection'
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
              namespace: 'default'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'
              namespace: 'devdemo'
              manifests: |
                $(Pipeline.Workspace)/manifests/selldep.yml
                $(Pipeline.Workspace)/manifests/sellsvc.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(RegistryName)/$(webRepository):$(tag)                